# -*- coding: utf-8 -*-
"""Copy of 2020-10-14_Anish_Lesson14

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yjBd-epq9yP1dbustvK9OnZ5azyBhBgD

# Lesson 14: Hunting Exoplanets In Space - Pandas DataFrame

### Teacher-Student Activities

In the last class, we learnt about the Pandas series. Now in this lesson, we will learn about Pandas DataFrame which is a collection of Pandas series. In other words, a Pandas DataFrame is a two-dimensional array.

In the process of learning Pandas DataFrames, we will learn how NASA finds the exoplanets in the universe. There are deep Physical and mathematical theories on exploring exoplanets in the space. But we will not go through all of that. Right now, we just need to understand the basic principle behind these theories to be able to learn how the exoplanets are found.

---

### Finding Exoplanets Principle

Imagine that you are in your room during the day time with the window curtains open. The room probably would be well-lit. Now, imagine that you close the curtains of the window and block the sunlight from entering the room. In this situation, the room would be darker and the visibility would be low.

So, whenever the curtains are open, the brightness of the light would be higher whereas when the curtains are closed, the brightness would be lower. We can measure the brightness of the light using a spectroscope.

The same principle is applied in searching for an exoplanet. There are billions of galaxies in the universe. These galaxies have millions of stars. One such galaxy is the Milky-way galaxy in which our solar system exists. The solar system has a star called Sun which has its own light. In astronomy, a star is a heavenly body which has its own light. There are 8 planets in our solar system orbiting around the Sun. Similar to this, in some other galaxy there would be a star and probably a planet would be revolving around that star.

Long back, NASA placed a telescope called Kepler telescope in the space. This telescope is used to measure the brightness of the stars in the far-distant galaxies.
 

<img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/kepler-space-telescope.jpg' width="800">

*Image credits: http://kepler.nasa.gov/Mission/discoveries/discoverygraphics/*

Whenever a planet, while orbiting its star, comes in between the telescope and the star, the brightness of the star recorded by the telescope is lower whereas when the planet goes behind the star, the brightness of the light recorded by the telescope is higher.

This method of detecting exoplanets in far-distant galaxies through the brightness of the light emitted by a star is called the **Transit Method**. You can read about it by clicking on the link provided in the **Activities** section under the title **How Do Astronomers Find Exoplanets?**

Essentially, if you plot the brightness on the vertical axis and the time on the horizontal axis, then you will see that the brightness of the star recorded by the telescope increases and decreases periodically. Thus, in the graph, you will notice a wave-like pattern. This indicates that the star definitely has at least one planet. 

<img src = 'https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/transit-method-gif.gif' width='800'>

*Image credits: https://imgur.com/r/SpaceGifs/43f17Ke*

The image below shows some of the exoplanets (Kepler 4b to Kepler 8b) discovered by the Kepler space telescope. You can see the brightness level radiated by the star for each planet. The Flux values on the vertical axis represent the brightness level of the star.

<img src = 'https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/transit-method.jpg' width='800'>

*Image credits: http://kepler.nasa.gov/Mission/discoveries/discoverygraphics/*

As you can see in the image above, the bigger the planet (Kepler 6b), deeper the dip in the brightness level. And, the longer the orbital period of a planet, broader is the width of the dip (Kepler 7b). Kepler 7b has the greatest orbital period of 4.9 days among these 5 planets.

So, this is how NASA finds a planet beyond our solar system. Now, let's use Kepler space telescope dataset to create a Pandas DataFrame in order to find out which stars beyond our solar system have a planet.

---

#### Activity 1: Loading A CSV File^^

Generally, we store data in different files such as text (`txt` format) file, comma-separated value (`csv` format) file, tab-separated value (`tsv` format) file etc. We can read the contents of these files through Python.

A comma-separated value (`csv`) file is used most commonly to store data.

To load or read the contents of a `csv` file, we can use the `read_csv()` function in Pandas. The data is read in the form of a two-dimensional array called a **Pandas DataFrame**.

As an input to the `read_csv()` function, we need to provide the full-location of the `csv` file that we wish to read in the string format. The file that we wish to read is stored in cloud storage. 

Here's the link to the file.

https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/exoTrain.csv

In the above link, `exoTrain.csv` is the name of the `csv` file. We will create Pandas DataFrame using this file.
"""

# Teacher Action: Read a 'csv' file using the 'read_csv()' function. Also, display the first 5 rows of the DataFrame using the 'head()' function.
# First of all we have to import the Pandas module with pd as an alias (or nickname).
import pandas as pd

exo_train_df= pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/exoTrain.csv')
exo_train_df.head()

"""As you can see, we have created a Pandas DataFrame for the `exoTrain.csv` file and stored it in the `exo_train_df` variable.

Now, you create a DataFrame for the `exoTest.csv` file and store it in a variable called `exo_test_df`. Here is the link to the file.

https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/exoTest.csv
"""

# Student Action: Read the 'exoTest.csv' file and display its first 5 rows using the 'head()' function.
import pandas as pd

exo_test_df = pd.read_csv("https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/exoTest.csv")
exo_test_df.head()

"""The two DataFrames have exactly the same type of data.

**Q: Why do we have a training dataset and a test dataset?**

Ans: We create machine learning models using the training dataset to train a computer so that it can learn from that data. It, thus, can make predictions based on what it has learnt. While learning, the computer tries to find a pattern in the data, how one information affects another, which information is the most critical one, etc.

The test dataset is used to test the accuracy of the model that you have built. The higher the accuracy, the higher is the prediction capability of the machine.

After creating the DataFrames, it is a good practice to find out the number of rows and columns that exist in a DataFrame. You can do this exercise by using the `shape` keyword.
"""

# Student Action: Find the number of rows and columns in the 'exo_train_df' DataFrame.
exo_train_df.shape

"""So, there are 5087 rows and 3198 columns in the `exo_train_df` DataFrame."""

# Student Action: How many rows and columns are there in the 'exo_test_df'?
exo_test_df.shape

"""There are 570 rows and 3198 columns in the `exo_test_df` DataFrame.

---

#### Activity 2: Check For The Missing Values^

In most of the cases, we do not get complete datasets. They either have some values missing from the rows and columns or they do not have standardized values.

For example: If there is a date column in a dataset, then there is a huge chance that some of the dates are entered in the `DD-MM-YYYY` format, some in the `MM-DD-YYYY` format and so on.

So, before going ahead with the analysis, it is a good idea to check whether the dataset has any missing values.
"""

# Teacher Action: Check for the missing values using the 'isnull()' function.
exo_train_df.isnull()

"""To check for missing values in a DataFrame, use `isnull()` function. If a DataFrame has a missing value, then the `isnull()` function will return `True` else it will return `False`. 

As you can see, the `isnull()` function has returned the DataFrame with a lot of `False` values as an output. There are $5087\times3198=16268226$ values in the DataFrame. It is not feasible to check so many values manually. So, we need a better approach to check for missing values.

We can call the `sum()` function on the `exo_train_df.isnull()` statement. It will return the sum of `True` values for every column in a DataFrame. If a column does not have any missing values, then it will return `0` else a number greater than `0`.
"""

# Teacher Action: Use the 'sum()' function to find the total number of True values in each column.
exo_train_df.isnull().sum()

"""We can see that a lot of columns have `0` missing values. But still, we cannot manually see whether all the columns have missing values or not because the list of columns is too long to be seen in this notebook. There are `3198` columns to search. If there were very few columns, then we would not need to go any further to check for the missing values.

We, again, need a better approach. We will create a variable called `num_missing_values` to store the total number of values that are missing. Then, we will iterate through each column and within each column, we will iterate through each item to check for the missing values. If the `isnull()` function for a column returns `True`, then we will increase the value of the `num_missing_values` by `1` else we will not do anything.
"""

# Teacher Action: View all the columns in the 'exo_train_df' DataFrame.
exo_train_df.columns

"""The `columns` keyword returns an array of all the columns in a DataFrame. To get a column from a DataFrame just, write the name of the column inside the square brackets in the single or double inverted quote after writing the name of the DataFrame. 
For example: If you want to get the values of `FLUX.1` column from the `exo_train_df`, then write `exo_train_df['FLUX.1']`
"""

# Teacher Action: Get the values of the 'FLUX.1' column from a DataFrame.
exo_train_df['FLUX.1']

# Student Action: Get all the values of the 'FLUX.2' column.
exo_train_df["FLUX.2"]

"""Now, using the `columns` keyword and the square brackets method of getting all items in a column, we will check for the missing values in the entire DataFrame."""

# Teacher Action: Iterate through the 'exo_train_df' DataFrame to find the total number of missing values.
missing_items=0
# Here, we have created the num_missing_values which will store all the number of missing values in the DataFrame.

# Now, we will iterate through every column in the DataFrame, then will iterate through every item in each column.
for column in exo_train_df.columns:
  for item in exo_train_df[column].isnull():
    if item== True:
      missing_items += 1
print(missing_items)

"""As you can see, there are no missing values in the DataFrame because the final value of the `num_missing_values` is `0`."""

# Student Action: In the above code replace 'True' with 'False' and see what is the value of the 'num_missing_values' variable. 
# The output should be 16268226.
missing_items=0
for column in exo_test_df.columns:
  for item in exo_test_df[column].isnull():
    if (item==False):
      missing_items+=1

print(missing_items)

"""As we can see, the output is 16,268,226. It is the sum of all the values which are False. That means there are no missing values because the total number of values in the `exo_train_df` is 16,268,226 which is exactly the same as the total number of non-missing values.

---

#### Activity 3: Slicing A DataFrame Using The `iloc[]` Function^^^

 We want to plot the scatter plots and line plots for 6 stars. For each of these stars we will create a Pandas series which will have the brightness levels starting from `FLUX.1` to `FLUX.3197`. 

 Effectively, we need to create 6 Pandas series. 

Let's create a Pandas series for the first star in the `exo_train_df`. Let's store the series in a variable called `star_0`. To do this, we need to use the `iloc` function.
"""

# Teacher Action: Create a Pandas series from a Pandas DataFrame using the 'iloc[]' function.
star_0= exo_train_df.iloc[0,:]
star_0

"""Inside, the `iloc[]` function, the digit `0` indicates the first row (located at index `0`) of the `exo_train_df` DataFrame and the colon (`:`) symbol denotes *collect all the values from the first column till the last column*, i.e., all the columns starting from `LABEL` to `FLUX.3197` columns.

**Syntax:** 

`dataframe_name.iloc[row_position_start : row_position_end, column_position_start : column_position_end]`

In this syntax: 

- `row_position_start` denotes the position of the row in the DataFrame **starting** from whose values you want to take in the new Pandas series or DataFrame.
- `row_position_end` denotes the position of the row in the DataFrame till whose values you want to take in the new Pandas series or DataFrame.
- `column_position_start` denotes the position of the column in the DataFrame **starting** from whose values you want to take in the new Pandas series or DataFrame.
- `column_position_end` denotes the position of the column in the DataFrame till whose values you want to take in the new Pandas series or DataFrame.

You can verify manually whether we have extracted the values from the first row or not by viewing the first 5 rows of the DataFrame using the `head()` function.
"""

# Student Action: Compare the values of the 'star_0' Pandas series with the first row in the 'exo_train_df' DataFrame.
exo_train_df.head()

"""We have confirmed that we indeed created a Pandas series using the `iloc[]` function."""

# Student Action: Verify whether the series created is actually a Pandas series using the 'type()' function.
type(star_0)

"""As you can see, `star_0` is a Pandas series."""

# Student Action: Using the 'iloc[]' function, create a Pandas series for the second star and store it in a variable called 'star_1'.
# Use the 'head()' function to display only the first 5 values of the series.
star_1= exo_train_df.iloc[1,:]
star_1

# Student Action: Using the 'iloc[]' function, create a Pandas series for the third star and store it in a variable called 'star_2'.
star_2= exo_train_df.iloc[2,:]
star_2

"""We have created a Pandas series for each of the first three stars. Now, let's create the same for each of the last three stars in the DataFrame."""

# Student Action: Display the last 5 rows of the 'exo_train_df' DataFrame using the 'tail()' function.
exo_train_df.tail()

# Student Action: Using the 'iloc[]' function, create a Pandas series for the last star and store it in a variable called 'star_5086'.
star_5086= exo_train_df.iloc[5086,:]
star_5086

# Student Action: Using the 'iloc[]' function, create a Pandas series for the second-last star and store it in a variable called 'star_5085'.
star_5085= exo_train_df.iloc[5085,:]
star_5085

# Student Action: Using the 'iloc[]' function, create a Pandas series for the third-last star and store it in a variable called 'star_5084'.
star_5084= exo_train_df.iloc[5084,:]
star_5084

"""So, in this class we learnt:

1. The transit method of detecting exoplanets

2. How to import data from a CSV file and create a Pandas DataFrame from the file. 

3. How to check for the missing values.

4. How to slice a DataFrame using the `iloc[]` function.

In the next class, we will learn how to create a scatter plot and a line plot to visualise data.

---
"""