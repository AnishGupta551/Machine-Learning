# -*- coding: utf-8 -*-
"""2020-10-16_Anish_Lesson15

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12nWKyBtzUbTJgOmD0U_TNluS5XL0zkXK

# Lesson 15: Hunting Exoplanets In Space - Scatter & Line Plots

### Teacher-Student Activities

In the last class, we learnt the principle behind the **transit method** of finding exoplanets in space. We also learnt how to create Pandas DataFrames, how to find the number of rows and columns in a DataFrame, how to check for the missing values and how to slice a DataFrame using the `iloc[]` function. 

In this class, we will create **scatter plots** and **line plots** to visualise the fluctuations in the brightness levels (or flux values) of the light emitted by the stars.

- If there is a periodic dip in the brightness levels, then we can say that the star has at least one planet. This star is labelled as `2`.

-  If there is no clear periodic dip in the brightness levels, then we could say that the star has no planet. In the datasets, such stars are labelled as `1`.

The `exo_train_df` has 5087 rows and 3198 columns. Each row denotes a star. The `LABEL` column tells the label or the classification of the star, i.e., whether it has at least one planet or at most one planet. The remaining 3197 columns, i.e., the columns `FLUX.1` to `FLUX.3197` contain the brightness levels for each star. A brightness level is a floating-point value which could be either positive, negative or zero. *For the time being, do not worry about the negative brightness levels.*

We will create the scatter plots and line plots for three stars labelled as `2` and three stars labelled as `1`.

As far as data analysis is concerned, you do not have to create a DataFrame for the test dataset. So, in this lesson, we will not create a DataFrame for `exoTest.csv` file.

Let's run all the codes in the code cells that we have already covered in the previous class and begin this class from the **Activity 1: Scatter And Line Plots For First 3 Stars** section. You too run the code cells until the first activity.

---

#### Loading The Training Dataset

Dataset links (Don't click on them):

1. Train dataset
   
   https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/exoTrain.csv

2. Test dataset 
   
   https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/exoTest.csv
"""

# Load the training dataset.
import pandas as pd

exo_train_df = pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/kepler-exoplanets-dataset/exoTrain.csv')
exo_train_df.head()

# Check the number of rows and columns in the 'exo_train_df'.
exo_train_df.shape

"""---

#### Check For The Missing Values
"""

# Find the total number of missing values in the 'exo_train_df'.
num_missing_values = 0

for column in exo_train_df.columns:
  for item in exo_train_df[column].isnull():
    if item == True:
      num_missing_values += 1

num_missing_values

"""There are no missing values in the DataFrame.

---

#### Slicing A DataFrame Using The `iloc[]` Function
Create Pandas series for the first 3 stars and the last 3 stars in the DataFrame.
"""

# Create a Pandas series for the first star and store it in a variable called 'star_0'.
star_0 = exo_train_df.iloc[0, :]
star_0.head()

"""**Syntax:** 

`dataframe_name.iloc[row_position_start : row_position_end, column_position_start : column_position_end]`

In this syntax: 

- `row_position_start` denotes the position of the row in the DataFrame **starting** from whose values you want to take in the new Pandas series or DataFrame.
- `row_position_end` denotes the position of the row in the DataFrame till whose values you want to take in the new Pandas series or DataFrame.
- `column_position_start` denotes the position of the column in the DataFrame **starting** from whose values you want to take in the new Pandas series or DataFrame.
- `column_position_end` denotes the position of the column in the DataFrame till whose values you want to take in the new Pandas series or DataFrame.

You can verify manually whether we have extracted the values from the first row or not by viewing the first 5 rows of the DataFrame using the `head()` function.
"""

# Create a Pandas series for the second star and store it in a variable called 'star_1'.
star_1 = exo_train_df.iloc[1, :]
star_1.head()

# Create a Pandas series for the third star and store it in a variable called 'star_2'.
star_2 = exo_train_df.iloc[2, :]
star_2.head()

# Create a Pandas series for the last star and store it in a variable called 'star_5086'.
star_5086 = exo_train_df.iloc[5086, :]
star_5086.head()

# Create a Pandas series for the second-last star and store it in a variable called 'star_5085'.
star_5085 = exo_train_df.iloc[5085, :]
star_5085.head()

# Create a Pandas series for the third-last star and store it in a variable called 'star_5084'.
star_5084 = exo_train_df.iloc[5084, :]
star_5084.head()

"""---

### Scatter and Line Plots of Flux

Now that we have Pandas series for the 3 stars labelled as `2` and 3 stars labelled as `1`, let's plot the **Flux** values on the  $y-axis$ for each observation for a star. On $x-axis$, we will plot numbers ranging from `1` to `3197`.

---

#### Activity 1: Scatter And Line Plots For First 3 Stars^

Let's plot the scatter plots and line plots for the first three planets in the `exo_train_df` DataFrame.

To make this plot, 

1. We first need to import a Python module named `matplotlib.pyplot` with `plt` as an alias. This module is exclusively designed for creating graphs such as bar graphs, histogram, line plot, scatter plot etc. We will learn more about this module as we go on in this course. Meanwhile, you can read more about this module by clicking on the link provided in the **Activities** section under the title **The `matplotlib` Documentation**.

  ```
  import matplotlib.pyplot as plt
  ```

2. Then we need to call the `figure()` function from the `plt` module to resize the plot. The `figure()` function takes `figsize=(horizontal_width, vertical_height)` parameter as an input.  

  ```
  plt.figure(figsize=(16, 4))
  ```

3. Then we need either a Python list, a NumPy array or a Pandas series containing the numbers between `1` and `3197` to plot them on the $x-axis$.

  ```
  x_values_star_0 = np.arange(1, 3198)
  ```

4. Then we need `star_0` Pandas series to plot the `FLUX` values on the $y-axis$ for the first star in the DataFrame. 

  ```
  y_values_star_0 = star_0[1:]
  ```

5. Then we need to call the `scatter()` function from the `plt` module with the required inputs as described in the third and the fourth steps.

  ```
  plt.scatter(x_values_star_0, y_values_star_0)
  ```

6. Finally, we need to call the `show()` function from the `plt` module.

  ```
  plt.show()
  ```
"""

# Teacher Action: Create a scatter plot for 'star_0' Pandas series.
# 1. Import the 'numpy' and 'matplotlib.pyplot' modules.
import matplotlib.pyplot as plt
import numpy as np
# 2. Call the 'figure()' function to resize the plot.
plt.figure(figsize=(16,4))
# Here, 16 means the plot is 16 units wide and 4 units high. Play with these numbers to draw different sized plots.

# Call the 'scatter()' function to make a scatter plot between the x and y values.
# The scatter() function requires two inputs: x and y where x is the data to be plotted on the x-axis and y is the data to be plotted on the y-axis.
# In our case, x is a Pandas series of numbers between 1 and 3197 and y is the 'FLUX' values for a star.
x_plots_star0= np.arange(1,3198)
y_plots_star0= star_0[1:]
# Here, star_0[1:] is a Pandas series containing all the 'FLUX' values starting from the value at index 1 till the value at last index, i.e., 3197
# The 'arange(1, 3198)' function from the 'numpy' module will generate numbers from 1 to 3197.

# 3. Call the 'scatter()' function.
plt.scatter(x_plots_star0,y_plots_star0)
# 4. Call the 'show()' function.
plt.show()
# The 'show()' function displays the plot.

"""As we can see from the graph, there is a somewhat periodic downward peak in the brightness level recorded by the Kepler telescope for this star. This suggests that the first star in the DataFrame has at least one planet.

Let's draw the line plot also to see this fluctuation in a different manner. 

To draw a line plot, you have to follow the same steps that you followed to create a scatter plot except in the fifth step, you have to call the `plot()` function instead of the `scatter()` function from the `plt` module.
"""

# Teacher Action: Create a line plot for 'star_0' Pandas series.
# Line plot for the first star in the DataFrame.
plt.figure(figsize=(18,6))
# Call the plot(x, y) function to draw a line plot between the x and y values.
plt.plot(x_plots_star0, y_plots_star0)
plt.show()

"""The line plot also confirms the periodic downward-peaks in the `FLUX` values."""

# Student Action: Create a scatter plot for the second star, i.e., 'star_1'.
import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize=[15, 8])

x_value_star1 = np.arange(1, 3198)
y_value_star1 = star_1[1: ]

plt.scatter(x_value_star1, y_value_star1)
plt.show()

"""It is quite difficult to spot any clear pattern in the scatter plot for the second star in the DataFrame. Let's draw a line plot to identify a pattern."""

# Student Action: Create a line plot for the second star, i.e., 'star_1'.
plt.figure(figsize=(20, 10))
plt.plot(x_value_star1, y_value_star1)
plt.show()

"""As we can see, there are consistent sudden drops in the brightness levels for the second star in the DataFrame. This suggests that the planet is orbiting its star at very high radial speed. Also, the planet could be very close to the star."""

# Student Action: Create a scatter plot for the third star, i.e., 'star_2'.
plt.figure(figsize=(20, 10))

x_value_star2 = np.arange(1,3198)
y_value_star2 = star_2[1: ]

plt.scatter(x_value_star2, y_value_star2)
plt.show()

"""Here also, we can spot a clear repetitive downward-peaks which confirms that the star has at least one planet."""

# Student Action: Create a line plot for the third star, i.e, 'star_2'.
plt.figure(figsize= (20, 10))

plt.plot(x_value_star2, y_value_star2)
plt.show()

"""The line plot also confirms the repetitive downward-peak pattern.

---

#### Activity 2: Scatter Plots And Line Plots For Last 3 Stars^^^
Now, let's create the scatter plots and line plots for the last three stars in the DataFrame which have been labelled or classified as `1`.
"""

# Student Action: Create a scatter plot for the last star, i.e., 'star_5086' in the DataFrame.
plt.figure(figsize=(20, 10))

x_value_star5086 = np.arange(1, 3198)
y_value_star5086 = star_5086[1: ]
plt.scatter(x_value_star5086, y_value_star5086)
plt.show()

"""As you can see, there is no clear periodic downward-peak in the brightness levels of the light emitted from the star. We cannot make a claim that the star has a planet orbiting it. Let's also create the line plot to confirm our inference."""

# Student Action: Create a line plot for the last star, i.e, 'star_5086' in the DataFrame.
plt.figure(figsize=(20, 10))

plt.plot(x_value_star5086, y_value_star5086)
plt.show()

"""There are some sudden spikes in the line plot but they exist at irregular intervals. So we cannot say for sure that the star has a planet."""

# Student Action: Create a scatter plot for the second-last star, i.e., 'star_5085' in the DataFrame.
plt.figure(figsize=(20, 10))

x_value_star5085 = np.arange(1, 3198)
y_value_star5085 = star_5085[1: ]

plt.scatter(x_value_star5085, y_value_star5085)
plt.show()

"""There is no clear periodic downward-peak pattern in the `FLUX` values for the second-last star."""

# Student Action: Create a line plot for the second-last star in the DataFrame.
plt.figure(figsize=(20, 10))

plt.plot(x_value_star5085, y_value_star5085)
plt.show()

"""The line-plot also confirms that there is no clear periodic downward-peak pattern in the `FLUX` values."""

# Student Action: Create a scatter plot for the third-last star, i.e., 'star_5084' in the DataFrame.
plt.figure(figsize=(20, 10))

x_value_star5084 = np.arange(1, 3198)
y_value_star5084 = star_5084[1: ]
plt.scatter(x_value_star5084, y_value_star5084)
plt.show()

"""No clear periodic downward-peak pattern for the third-last star."""

# Student Action: Create a line plot for the third-last star in the DataFrame.
plt.figure(figsize=(20, 10))

plt.plot(x_value_star5084, y_value_star5084)
plt.show()

"""So, this is how we create scatter and line plots for the numeric data.

**Note:** Now you can attempt **Project 4** on your own.

---
"""